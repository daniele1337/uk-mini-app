#!/usr/bin/env python3
"""
Telegram Bot –¥–ª—è –ñ–ö–• Mini App
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç QR-–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
"""

import os
import json
import requests
import logging
from datetime import datetime
from flask import Flask, request, jsonify
import threading
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = "8172377647:AAE6MS5TBL-tZKBWs1A3WPECef48cl_SgnU"
WEBHOOK_URL = "https://24autoflow.ru/webhook/telegram"
API_BASE_URL = "https://24autoflow.ru/api"

class TelegramBot:
    def __init__(self):
        self.token = BOT_TOKEN
        self.api_url = f"https://api.telegram.org/bot{self.token}"
        self.webhook_url = WEBHOOK_URL
        self.api_base_url = API_BASE_URL
        
    def set_webhook(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        try:
            url = f"{self.api_url}/setWebhook"
            data = {
                'url': self.webhook_url,
                'allowed_updates': ['message', 'callback_query']
            }
            response = requests.post(url, json=data)
            
            if response.status_code == 200:
                result = response.json()
                if result.get('ok'):
                    logger.info("‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                    return True
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {result}")
                    return False
            else:
                logger.error(f"‚ùå HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ webhook: {response.status_code}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {e}")
            return False
    
    def delete_webhook(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ webhook"""
        try:
            url = f"{self.api_url}/deleteWebhook"
            response = requests.post(url)
            if response.status_code == 200:
                logger.info("‚úÖ Webhook —É–¥–∞–ª–µ–Ω")
                return True
            return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è webhook: {e}")
            return False
    
    def get_me(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ"""
        try:
            url = f"{self.api_url}/getMe"
            response = requests.get(url)
            if response.status_code == 200:
                result = response.json()
                if result.get('ok'):
                    bot_info = result['result']
                    logger.info(f"ü§ñ –ë–æ—Ç: {bot_info['first_name']} (@{bot_info['username']})")
                    return bot_info
            return None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ: {e}")
            return None
    
    def send_message(self, chat_id, text, parse_mode='HTML', reply_markup=None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            url = f"{self.api_url}/sendMessage"
            data = {
                'chat_id': chat_id,
                'text': text,
                'parse_mode': parse_mode
            }
            
            if reply_markup:
                data['reply_markup'] = reply_markup
            
            response = requests.post(url, json=data)
            if response.status_code == 200:
                result = response.json()
                if result.get('ok'):
                    logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}")
                    return result['result']
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {result}")
                    return None
            else:
                logger.error(f"‚ùå HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {response.status_code}")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return None
    
    def send_qr_auth_data(self, session_id, user):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö QR-–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä"""
        try:
            url = f"{self.api_base_url}/auth/qr-login"
            data = {
                'session_id': session_id,
                'telegram_id': user.get('id'),
                'first_name': user.get('first_name', ''),
                'last_name': user.get('last_name', ''),
                'username': user.get('username', '')
            }
            
            logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ QR-–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {data}")
            
            response = requests.post(url, json=data, timeout=10)
            
            if response.status_code == 200:
                result = response.json()
                if result.get('success'):
                    logger.info(f"‚úÖ QR-–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.get('first_name')}")
                    return True
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ QR-–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {result}")
                    return False
            else:
                logger.error(f"‚ùå HTTP –æ—à–∏–±–∫–∞ QR-–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code} - {response.text}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö QR-–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            return False
    
    def handle_start_command(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        try:
            text = message.get('text', '')
            user = message.get('from', {})
            chat_id = message.get('chat', {}).get('id')
            
            logger.info(f"üì± –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ start: {text} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.get('first_name')}")
            
            if text.startswith('/start qr_'):
                # QR-–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
                session_id = text.replace('/start qr_', '')
                logger.info(f"üîê QR-–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è —Å–µ—Å—Å–∏–∏: {session_id}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
                success = self.send_qr_auth_data(session_id, user)
                
                if success:
                    response_text = (
                        "‚úÖ <b>–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!</b>\n\n"
                        "–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å –≤ —Å–∏—Å—Ç–µ–º–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ–º–æ–º.\n"
                        "–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –∑–∞–∫—Ä—ã—Ç—å —ç—Ç–æ –æ–∫–Ω–æ –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±—Ä–∞—É–∑–µ—Ä.\n\n"
                        "üöÄ <i>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É!</i>"
                    )
                else:
                    response_text = (
                        "‚ùå <b>–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏</b>\n\n"
                        "–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ.\n"
                        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n\n"
                        "üîÑ <i>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥ —Å–Ω–æ–≤–∞</i>"
                    )
                
                self.send_message(chat_id, response_text)
                
            else:
                # –û–±—ã—á–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ start
                response_text = (
                    "üè† <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ–º–æ–º!</b>\n\n"
                    "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º:\n"
                    "‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö\n"
                    "‚Ä¢ –ë—ã—Å—Ç—Ä–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏\n"
                    "‚Ä¢ –û—Å—Ç–∞–≤–∞—Ç—å—Å—è –≤ –∫—É—Ä—Å–µ –Ω–æ–≤–æ—Å—Ç–µ–π –¥–æ–º–∞\n\n"
                    "üì± <i>–î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –æ—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥</i>\n\n"
                    "üîó <a href='https://24autoflow.ru'>–û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ</a>"
                )
                
                # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                reply_markup = {
                    'inline_keyboard': [[
                        {
                            'text': 'üåê –û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
                            'url': 'https://24autoflow.ru'
                        }
                    ]]
                }
                
                self.send_message(chat_id, response_text, reply_markup=reply_markup)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã start: {e}")
    
    def handle_message(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            text = message.get('text', '')
            
            if text.startswith('/start'):
                self.handle_start_command(message)
            elif text.startswith('/help'):
                self.handle_help_command(message)
            else:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                chat_id = message.get('chat', {}).get('id')
                response_text = (
                    "ü§ñ <b>–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ–º–æ–º</b>\n\n"
                    "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                    "/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
                    "/help - –ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å\n\n"
                    "üì± <i>–î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –æ—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥</i>"
                )
                self.send_message(chat_id, response_text)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    def handle_help_command(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
        try:
            chat_id = message.get('chat', {}).get('id')
            response_text = (
                "‚ùì <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞</b>\n\n"
                "üîê <b>QR-–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è:</b>\n"
                "1. –û—Ç–∫—Ä–æ–π—Ç–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ\n"
                "2. –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ –≤ Telegram\n"
                "3. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É\n\n"
                "üì± <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b>\n"
                "–ë–æ—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞–º –≤–∞–∂–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:\n"
                "‚Ä¢ –ù–æ–≤–æ—Å—Ç–∏ –¥–æ–º–∞\n"
                "‚Ä¢ –ü–ª–∞–Ω–æ–≤—ã–µ —Ä–∞–±–æ—Ç—ã\n"
                "‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã\n\n"
                "üîó <b>–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏:</b>\n"
                "‚Ä¢ <a href='https://24autoflow.ru'>–í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ</a>\n\n"
                "üìû <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b>\n"
                "–ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n\n"
                "üöÄ <i>–£–¥–∞—á–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!</i>"
            )
            
            self.send_message(chat_id, response_text)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã help: {e}")
    
    def process_update(self, update):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram"""
        try:
            if 'message' in update:
                self.handle_message(update['message'])
            elif 'callback_query' in update:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback query (–∫–Ω–æ–ø–∫–∏)
                callback_query = update['callback_query']
                chat_id = callback_query['message']['chat']['id']
                
                # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
                callback_id = callback_query['id']
                url = f"{self.api_url}/answerCallbackQuery"
                requests.post(url, json={'callback_query_id': callback_id})
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
                data = callback_query.get('data', '')
                if data == 'open_webapp':
                    response_text = "üîó –û—Ç–∫—Ä–æ–π—Ç–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: https://24autoflow.ru"
                    self.send_message(chat_id, response_text)
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
bot = TelegramBot()

# Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è webhook
app = Flask(__name__)

@app.route('/webhook/telegram', methods=['POST'])
def telegram_webhook():
    """Webhook endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram"""
    try:
        update = request.json
        logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {update}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        threading.Thread(target=bot.process_update, args=(update,)).start()
        
        return jsonify({'ok': True})
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ webhook: {e}")
        return jsonify({'ok': False, 'error': str(e)}), 500

@app.route('/webhook/telegram', methods=['GET'])
def telegram_webhook_info():
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ webhook"""
    return jsonify({
        'webhook_url': bot.webhook_url,
        'bot_info': bot.get_me(),
        'status': 'active'
    })

def setup_bot():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞"""
    try:
        logger.info("üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram –±–æ—Ç–∞...")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
        bot_info = bot.get_me()
        if not bot_info:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ")
            return False
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
        if bot.set_webhook():
            logger.info("‚úÖ –ë–æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
            return True
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å webhook")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞: {e}")
        return False

def run_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        logger.info("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
        
        if setup_bot():
            logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
            logger.info(f"üåê Webhook URL: {bot.webhook_url}")
            logger.info("üì± –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            app.run(host='0.0.0.0', port=5001, debug=False)
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")

if __name__ == "__main__":
    run_bot()
